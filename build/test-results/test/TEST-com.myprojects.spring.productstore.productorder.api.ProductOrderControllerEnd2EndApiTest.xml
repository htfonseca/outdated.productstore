<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest" tests="3" skipped="0" failures="0" errors="0" timestamp="2018-12-05T22:29:40" hostname="htfmac.lan" time="1.704">
  <properties/>
  <testcase name="verifyAndDocumentReadProductSuccessfully()" classname="com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest" time="1.09"/>
  <testcase name="verifyAndDocumentReadProductsSuccessfully()" classname="com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest" time="0.242"/>
  <testcase name="verifyAndDocumentCreateProductOrderSuccessfully()" classname="com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest" time="0.367"/>
  <system-out><![CDATA[22:29:30.189 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
22:29:30.218 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
22:29:30.250 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest] from class [org.springframework.boot.test.context.SpringBootTestContextBootstrapper]
22:29:30.267 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest], using SpringBootContextLoader
22:29:30.272 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest]: class path resource [com/myprojects/spring/productstore/productorder/api/ProductOrderControllerEnd2EndApiTest-context.xml] does not exist
22:29:30.273 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest]: class path resource [com/myprojects/spring/productstore/productorder/api/ProductOrderControllerEnd2EndApiTestContext.groovy] does not exist
22:29:30.273 [Test worker] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest]: no resource found for suffixes {-context.xml, Context.groovy}.
22:29:30.275 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest]: ProductOrderControllerEnd2EndApiTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
22:29:30.373 [Test worker] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest]
22:29:30.523 [Test worker] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [/Users/htfonseca/Documents/MyProjects/spring/productstore/build/classes/java/main/com/myprojects/spring/productstore/StoreApplication.class]
22:29:30.524 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.myprojects.spring.productstore.StoreApplication for test class com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest
22:29:30.676 [Test worker] DEBUG org.springframework.boot.test.context.SpringBootTestContextBootstrapper - @TestExecutionListeners is not present for class [com.myprojects.spring.productstore.productorder.api.ProductOrderControllerEnd2EndApiTest]: using defaults.
22:29:30.677 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
22:29:30.710 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@b704c95, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@46de59fa, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@63e3c325, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@111e9c3a, org.springframework.test.context.support.DirtiesContextTestExecutionListener@18836e68, org.springframework.test.context.transaction.TransactionalTestExecutionListener@2c26e50b, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@51a1f141, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@34bb4803, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@37c880d2, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@2cdd359d, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@72a8e2be, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@1c3d47b8]
22:29:30.721 [Test worker] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@4fa5c468 testClass = ProductOrderControllerEnd2EndApiTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@216f2134 testClass = ProductOrderControllerEnd2EndApiTest, locations = '{}', classes = '{class com.myprojects.spring.productstore.StoreApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@27195e1a, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@76b5f388, [ImportsContextCustomizer@3d20f66f key = [@org.junit.jupiter.api.extension.ExtendWith(value=[class org.springframework.test.context.junit.jupiter.SpringExtension]), @org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc(webDriverEnabled=true, print=DEFAULT, webClientEnabled=true, secure=true, addFilters=true, printOnlyOnFailure=true), @org.springframework.boot.test.autoconfigure.properties.PropertyMapping(value=spring.test.mockmvc, skip=NO), @org.junit.jupiter.api.extension.ExtendWith(value=[class org.springframework.restdocs.RestDocumentationExtension, class org.springframework.test.context.junit.jupiter.SpringExtension]), @org.springframework.context.annotation.Import(value=[class org.springframework.boot.test.autoconfigure.restdocs.RestDocumentationContextProviderRegistrar]), @org.springframework.boot.test.autoconfigure.properties.PropertyMapping(value=spring.test.restdocs, skip=NO), @org.apiguardian.api.API(consumers=[*], since=5.0, status=STABLE), @org.springframework.context.annotation.Import(value=[class org.springframework.boot.autoconfigure.ImportAutoConfigurationImportSelector]), @org.springframework.test.context.BootstrapWith(value=class org.springframework.boot.test.context.SpringBootTestContextBootstrapper), @org.springframework.boot.autoconfigure.ImportAutoConfiguration(value=[], exclude=[], classes=[]), @org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs(uriScheme=http, outputDir=, uriPort=8080, value=, uriHost=localhost), @org.junit.jupiter.api.DisplayName(value=Test that Product Order API), @org.springframework.boot.test.context.SpringBootTest(webEnvironment=MOCK, value=[], properties=[], classes=[])]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@237305bd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@64a9b159, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@3808b773], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map['org.springframework.test.context.web.ServletTestExecutionListener.activateListener' -> true]], class annotated with @DirtiesContext [false] with mode [null].
22:29:31.053 [Test worker] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true, server.port=-1}

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.1.RELEASE)

2018-12-05 22:29:31.675  INFO 2124 --- [    Test worker] p.a.ProductOrderControllerEnd2EndApiTest : Starting ProductOrderControllerEnd2EndApiTest on htfmac.lan with PID 2124 (started by htfonseca in /Users/htfonseca/Documents/MyProjects/spring/productstore)
2018-12-05 22:29:31.677  INFO 2124 --- [    Test worker] p.a.ProductOrderControllerEnd2EndApiTest : No active profile set, falling back to default profiles: default
2018-12-05 22:29:33.072  INFO 2124 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data repositories in DEFAULT mode.
2018-12-05 22:29:33.289  INFO 2124 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 202ms. Found 2 repository interfaces.
2018-12-05 22:29:33.997  INFO 2124 --- [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$39033de6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-12-05 22:29:34.085  INFO 2124 --- [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$b8838b18] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-12-05 22:29:34.528  INFO 2124 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2018-12-05 22:29:34.785  INFO 2124 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2018-12-05 22:29:34.904  INFO 2124 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2018-12-05 22:29:35.037  INFO 2124 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate Core {5.3.7.Final}
2018-12-05 22:29:35.039  INFO 2124 --- [    Test worker] org.hibernate.cfg.Environment            : HHH000206: hibernate.properties not found
2018-12-05 22:29:35.276  INFO 2124 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2018-12-05 22:29:35.637  INFO 2124 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: 
    
    create table product (
       id bigint not null,
        identifier binary not null,
        name varchar(100) not null,
        price decimal(19,2) not null,
        primary key (id)
    )
Hibernate: 
    
    create table product_order (
       id bigint not null,
        identifier binary not null,
        email varchar(255) not null,
        order_date date not null,
        primary key (id)
    )
Hibernate: 
    
    create table productorder_parcels (
       parcel_id bigint not null,
        amount integer not null,
        price decimal(19,2) not null,
        product_id bigint not null
    )
Hibernate: 
    
    alter table product 
       drop constraint if exists UK_Product_Identifier
Hibernate: 
    
    alter table product 
       add constraint UK_Product_Identifier unique (identifier)
Hibernate: 
    
    alter table product_order 
       drop constraint if exists ProductOrder
Hibernate: 
    
    alter table product_order 
       add constraint ProductOrder unique (identifier)
Hibernate: create sequence hibernate_sequence start with 1 increment by 1
Hibernate: 
    
    alter table productorder_parcels 
       add constraint FK_Order_Product 
       foreign key (product_id) 
       references product
Hibernate: 
    
    alter table productorder_parcels 
       add constraint FK_ProductOrder_Parcel_ProductOrderId 
       foreign key (parcel_id) 
       references product_order
2018-12-05 22:29:36.886  INFO 2124 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2018-12-05 22:29:39.144  INFO 2124 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2018-12-05 22:29:39.271  WARN 2124 --- [    Test worker] aWebConfiguration$JpaWebMvcConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2018-12-05 22:29:40.255  INFO 2124 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2018-12-05 22:29:40.255  INFO 2124 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2018-12-05 22:29:40.274  INFO 2124 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 19 ms
2018-12-05 22:29:40.312  INFO 2124 --- [    Test worker] p.a.ProductOrderControllerEnd2EndApiTest : Started ProductOrderControllerEnd2EndApiTest in 9.243 seconds (JVM running for 11.613)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
2018-12-05 22:29:40.714  INFO 2124 --- [    Test worker] o.h.h.i.QueryTranslatorFactoryInitiator  : HHH000397: Using ASTQueryTranslatorFactory
Hibernate: 
    /* select
        generatedAlias0 
    from
        ProductOrder as generatedAlias0 */ select
            productord0_.id as id1_1_,
            productord0_.identifier as identifi2_1_,
            productord0_.email as email3_1_,
            productord0_.order_date as order_da4_1_ 
        from
            product_order productord0_
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    /* select
        generatedAlias0 
    from
        ProductOrder as generatedAlias0 
    where
        generatedAlias0.identifier=:param0 */ select
            productord0_.id as id1_1_,
            productord0_.identifier as identifi2_1_,
            productord0_.email as email3_1_,
            productord0_.order_date as order_da4_1_ 
        from
            product_order productord0_ 
        where
            productord0_.identifier=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    /* select
        generatedAlias0 
    from
        ProductOrder as generatedAlias0 */ select
            productord0_.id as id1_1_,
            productord0_.identifier as identifi2_1_,
            productord0_.email as email3_1_,
            productord0_.order_date as order_da4_1_ 
        from
            product_order productord0_
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* select
        generatedAlias0 
    from
        Product as generatedAlias0 */ select
            product0_.id as id1_0_,
            product0_.identifier as identifi2_0_,
            product0_.name as name3_0_,
            product0_.price as price4_0_ 
        from
            product product0_
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* select
        count(*) 
    from
        ProductOrder x */ select
            count(*) as col_0_0_ 
        from
            product_order productord0_
Hibernate: 
    /* select
        generatedAlias0 
    from
        ProductOrder as generatedAlias0 
    where
        generatedAlias0.orderDate between :param0 and :param1 */ select
            productord0_.id as id1_1_,
            productord0_.identifier as identifi2_1_,
            productord0_.email as email3_1_,
            productord0_.order_date as order_da4_1_ 
        from
            product_order productord0_ 
        where
            productord0_.order_date between ? and ?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    /* select
        generatedAlias0 
    from
        ProductOrder as generatedAlias0 */ select
            productord0_.id as id1_1_,
            productord0_.identifier as identifi2_1_,
            productord0_.email as email3_1_,
            productord0_.order_date as order_da4_1_ 
        from
            product_order productord0_
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* select
        generatedAlias0 
    from
        Product as generatedAlias0 */ select
            product0_.id as id1_0_,
            product0_.identifier as identifi2_0_,
            product0_.name as name3_0_,
            product0_.price as price4_0_ 
        from
            product product0_
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.product.model.Product
        */ insert 
        into
            product
            (identifier, name, price, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* select
        generatedAlias0 
    from
        Product as generatedAlias0 */ select
            product0_.id as id1_0_,
            product0_.identifier as identifi2_0_,
            product0_.name as name3_0_,
            product0_.price as price4_0_ 
        from
            product product0_
Hibernate: 
    /* select
        generatedAlias0 
    from
        Product as generatedAlias0 
    where
        generatedAlias0.identifier=:param0 */ select
            product0_.id as id1_0_,
            product0_.identifier as identifi2_0_,
            product0_.name as name3_0_,
            product0_.price as price4_0_ 
        from
            product product0_ 
        where
            product0_.identifier=?
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    /* insert com.myprojects.spring.productstore.productorder.model.ProductOrder
        */ insert 
        into
            product_order
            (identifier, email, order_date, id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* insert collection
        row com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ insert 
        into
            productorder_parcels
            (parcel_id, amount, price, product_id) 
        values
            (?, ?, ?, ?)
Hibernate: 
    /* select
        generatedAlias0 
    from
        ProductOrder as generatedAlias0 */ select
            productord0_.id as id1_1_,
            productord0_.identifier as identifi2_1_,
            productord0_.email as email3_1_,
            productord0_.order_date as order_da4_1_ 
        from
            product_order productord0_
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    select
        parcels0_.parcel_id as parcel_i1_2_0_,
        parcels0_.amount as amount2_2_0_,
        parcels0_.price as price3_2_0_,
        parcels0_.product_id as product_4_2_0_,
        product1_.id as id1_0_1_,
        product1_.identifier as identifi2_0_1_,
        product1_.name as name3_0_1_,
        product1_.price as price4_0_1_ 
    from
        productorder_parcels parcels0_ 
    inner join
        product product1_ 
            on parcels0_.product_id=product1_.id 
    where
        parcels0_.parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete collection com.myprojects.spring.productstore.productorder.model.ProductOrder.parcels */ delete 
        from
            productorder_parcels 
        where
            parcel_id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.productorder.model.ProductOrder */ delete 
        from
            product_order 
        where
            id=?
Hibernate: 
    /* select
        generatedAlias0 
    from
        Product as generatedAlias0 */ select
            product0_.id as id1_0_,
            product0_.identifier as identifi2_0_,
            product0_.name as name3_0_,
            product0_.price as price4_0_ 
        from
            product product0_
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
Hibernate: 
    /* delete com.myprojects.spring.productstore.product.model.Product */ delete 
        from
            product 
        where
            id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
